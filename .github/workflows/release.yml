name: Create Release

on:
  push:
    branches: [master]

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for version comparison

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Get current version
        id: current_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Check if version changed
        id: version_check
        run: |
          git fetch origin HEAD~1:refs/remotes/origin/previous || true

          if git rev-parse origin/previous >/dev/null 2>&1; then
            PREVIOUS_VERSION=$(git show origin/previous:package.json | node -p "JSON.parse(require('fs').readFileSync(0, 'utf8')).version") || echo "0.0.0"
          else
            PREVIOUS_VERSION="0.0.0"
          fi

          CURRENT_VERSION="${{ steps.current_version.outputs.version }}"

          echo "previous_version=${PREVIOUS_VERSION}" >> $GITHUB_OUTPUT
          echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT

          if [ "${CURRENT_VERSION}" != "${PREVIOUS_VERSION}" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "üéâ Version changed from ${PREVIOUS_VERSION} to ${CURRENT_VERSION}"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è  No version change detected"
          fi

      - name: Generate release notes
        id: release_notes
        if: steps.version_check.outputs.changed == 'true'
        run: |
          VERSION="${{ steps.current_version.outputs.version }}"
          PREVIOUS_VERSION="${{ steps.version_check.outputs.previous_version }}"

          # Check if this is a milestone release (0.x.x ‚Üí 1.0.0)
          if [[ "${VERSION}" == "1.0.0" ]] && [[ "${PREVIOUS_VERSION}" =~ ^0\. ]]; then
            echo "# üéâ Milestone Release - v${VERSION}" > release_notes.md
            echo "" >> release_notes.md
            echo "_This marks the transition from development to stable release!_" >> release_notes.md
            echo "" >> release_notes.md
          fi

          # Generate release notes from commits since last version
          echo "## What's Changed" >> release_notes.md
          echo "" >> release_notes.md

          # Get commits since last version (if we have a previous version)
          if [ "${PREVIOUS_VERSION}" != "0.0.0" ]; then
            # Find the tag for the previous version (if it exists)
            LAST_TAG=$(git tag -l "v${PREVIOUS_VERSION}" | head -1) || echo ""
            
            if [ -n "${LAST_TAG}" ]; then
              git log ${LAST_TAG}..HEAD --oneline --no-merges | sed 's/^/- /' >> release_notes.md
            else
              # Fall back to commits from previous commit if no tag found
              git log HEAD~1..HEAD --oneline --no-merges | sed 's/^/- /' >> release_notes.md
            fi
          else
            # First release - show recent commits
            git log --oneline --no-merges -10 | sed 's/^/- /' >> release_notes.md
          fi

          echo "" >> release_notes.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/v${PREVIOUS_VERSION}...v${VERSION}" >> release_notes.md

          # Read the file content and set as output
          RELEASE_NOTES=$(cat release_notes.md)
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        if: steps.version_check.outputs.changed == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.current_version.outputs.version }}
          release_name: Release v${{ steps.current_version.outputs.version }}
          body: ${{ steps.release_notes.outputs.notes }}
          draft: false
          prerelease: false

      - name: Summary
        run: |
          if [ "${{ steps.version_check.outputs.changed }}" == "true" ]; then
            echo "‚úÖ Created release v${{ steps.current_version.outputs.version }}"
          else
            echo "‚è≠Ô∏è  No release needed - version unchanged"
          fi
